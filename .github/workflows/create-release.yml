name: Create Tag and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

concurrency:
  group: create-tag-and-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Validate the PR and extract version
  validate_and_tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.validate_title.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate branch name and extract version
        id: validate_title
        run: |
          branch_name="${{ github.ref_name }}"

          echo '1' $GITHUB_REF
          echo '2' ${{ github.ref }}
          echo '3' ${{ github.ref_name }}
          echo '4' ${{ github.head_ref }}
          echo '5' ${{ github.base_ref }}

          if [[ "$branch_name" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version=$(echo "$branch_name" | grep -oE '^v[0-9]+\.[0-9]+\.[0-9]+')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            echo "Branch name does not match the required format (vX.X.X)."
            exit 1  # Exit with failure
          fi
        shell: bash

      - name: Create a tag
        if: ${{ steps.validate_title.outputs.version != '' }}
        run: |
          git tag ${{ steps.validate_title.outputs.version }}
          git push origin ${{ steps.validate_title.outputs.version }}

  # Job 2: Compile using matrix for different platforms
  compile:
    needs: validate_and_tag
    if: ${{ needs.validate_and_tag.outputs.version != '' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            python-version: "3.x"
          - os: windows-latest
            python-version: "3.x"
            architecture: "x64"
          - os: macos-latest
            python-version: "3.x"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture || '' }}

      - name: Install Dependencies
        run: |
          if [ -f src/requirements.txt ]; then
            pip install -r src/requirements.txt
          fi

      - name: Install PyInstaller
        run: |
          pip install pyinstaller

      - name: Compile for ${{ matrix.os }}
        run: |
          cd src
          pyinstaller --onefile sub_adjust.py
          pyinstaller --onefile sub_converter.py
          cd ..
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mkdir -p build/linux
            mv src/dist/sub_adjust build/linux/
            mv src/dist/sub_converter build/linux/
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            mkdir -p build/windows
            mv src/dist/sub_adjust.exe build/windows/
            mv src/dist/sub_converter.exe build/windows/
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            mkdir -p build/macos
            mv src/dist/sub_adjust build/macos/
            mv src/dist/sub_converter build/macos/
          fi

  # Job 3: Create release
  create_release:
    needs: [validate_and_tag, compile]
    if: ${{ needs.validate_and_tag.outputs.version != '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Tar compiled Linux binaries
      - name: Tar Linux binaries
        run: |
          tar -czvf "sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-linux-x64.tar.gz" -C build/linux .

      # Tar compiled macOS binaries
      - name: Tar macOS binaries
        run: |
          tar -czvf "sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-macos-x64.tar.gz" -C build/macos .

      # Zip compiled Windows binaries
      - name: Zip Windows binaries
        run: |
          zip -r "sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-win-x64.zip" build/windows

      # Zip source code
      - name: Zip source code
        run: |
          zip -r "sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-source.zip" .

      # Create GitHub release
      - name: Create GitHub release
        id: create_release_step
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.validate_and_tag.outputs.version }}
          release_name: Release ${{ needs.validate_and_tag.outputs.version }}
          body: |
            Automatically created release for version ${{ needs.validate_and_tag.outputs.version }}.

            ### PR Description:
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      # Upload Linux binaries tar.gz file to release
      - name: Upload Linux binaries tar.gz file to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_step.outputs.upload_url }}
          asset_path: ./sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-linux-x64.tar.gz
          asset_name: sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-linux-x64.tar.gz
          asset_content_type: application/gzip

      # Upload macOS binaries tar.gz file to release
      - name: Upload macOS binaries tar.gz file to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_step.outputs.upload_url }}
          asset_path: ./sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-macos-x64.tar.gz
          asset_name: sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-macos-x64.tar.gz
          asset_content_type: application/gzip

      # Upload Windows binaries zip file to release
      - name: Upload Windows binaries zip file to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_step.outputs.upload_url }}
          asset_path: ./sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-win-x64.zip
          asset_name: sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-win-x64.zip
          asset_content_type: application/zip

      # Upload source zip file to release
      - name: Upload source zip file to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_step.outputs.upload_url }}
          asset_path: ./sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-source.zip
          asset_name: sub_adjust-v${{ needs.validate_and_tag.outputs.version }}-source.zip
          asset_content_type: application/zip
