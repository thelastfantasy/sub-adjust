name: Create Tag and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create_tag_and_release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Check if PR title matches vX.X.X format and extract version
      - name: Validate PR title and extract version
        id: validate_title
        run: |
          if [[ "${{ github.event.pull_request.title }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version=$(echo "${{ github.event.pull_request.title }}" | grep -oE '^v[0-9]+\.[0-9]+\.[0-9]+')
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "PR title does not match the required format (vX.X.X)."
            echo "version=" >> $GITHUB_OUTPUT  # Setting version to empty
            exit 0  # Exit normally
          fi
        shell: bash

      # Create a tag using the extracted version, only if version is set
      - name: Create a tag
        if: ${{ steps.validate_title.outputs.version != '' }}
        run: |
          git tag ${{ steps.validate_title.outputs.version }}
          git push origin ${{ steps.validate_title.outputs.version }}

      # Read the file list from PackageAssets.txt and zip the specified files into one archive
      - name: Zip release files
        if: ${{ steps.validate_title.outputs.version != '' }}
        run: |
          zip -r "sub-adjust_${{ steps.validate_title.outputs.version }}.zip" $(cat .github/workflows/PackageAssets.txt)

      # Create a release and upload the zip file
      - name: Create GitHub release
        id: create_release
        if: ${{ steps.validate_title.outputs.version != '' }}
        uses: actions/create-release@latest
        with:
          tag_name: ${{ steps.validate_title.outputs.version }}
          release_name: ${{ steps.validate_title.outputs.version }}
          body: |
            Automatically created release for version ${{ steps.validate_title.outputs.version }}.

            ### PR Description:
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
          commitish: ${{ github.sha }}

      # Upload the zip file as the release asset
      - name: Upload zip file to release
        if: ${{ steps.validate_title.outputs.version != '' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sub-adjust_${{ steps.validate_title.outputs.version }}.zip
          asset_name: sub-adjust_${{ steps.validate_title.outputs.version }}.zip
          asset_content_type: application/zip
